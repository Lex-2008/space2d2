{
  "version": 3,
  "sources": ["src/geometry.ts", "src/angle.ts", "src/utils.ts", "src/planets.ts", "src/stars.ts", "src/universe.ts", "src/hints.ts", "src/flightplan.ts", "src/draw.ts", "src/index.ts"],
  "sourcesContent": ["type vector = [number, number];\n\nfunction normVector(x: number, y: number): vector {\n\tconst d = Math.hypot(x, y);\n\treturn [x / d, y / d];\n}\n\nfunction scalarMul(v1: vector, v2: vector): number {\n\treturn v1[0] * v2[0] + v1[1] * v2[1];\n}\n\ninterface point {\n\tx: number,\n\ty: number\n}\n\n// see http://www.gamedev.ru/code/forum/?id=74832 and https://ru.wikipedia.org/wiki/\u0420\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u0435_\u043E\u0442_\u0442\u043E\u0447\u043A\u0438_\u0434\u043E_\u043F\u0440\u044F\u043C\u043E\u0439_\u043D\u0430_\u043F\u043B\u043E\u0441\u043A\u043E\u0441\u0442\u0438#\u041F\u0440\u044F\u043C\u0430\u044F_\u0437\u0430\u0434\u0430\u043D\u0430_\u0434\u0432\u0443\u043C\u044F_\u0442\u043E\u0447\u043A\u0430\u043C\u0438\nfunction dotOnLine(a: point, b: point, p: point): vector {\n\tconst v = normVector(a.x - b.x, a.y - b.y);\n\tconst m = scalarMul(v, [p.x - b.x, p.y - b.y]);\n\treturn [b.x + v[0] * m, b.y + v[1] * m];\n}\n\n// does a-b line cross obj p with size?\nexport function lineCrossesObj(a: point, b: point, p: point, size: number) {\n\tconst [x, y] = dotOnLine(a, b, p);\n\treturn x >= Math.min(a.x, b.x) &&\n\t\tx <= Math.max(a.x, b.x) &&\n\t\ty >= Math.min(a.y, b.y) &&\n\t\ty <= Math.max(a.y, b.y) &&\n\t\tMath.hypot(x - p.x, y - p.y) < size;\n}\n\n\n// see https://e-maxx.ru/algo/segments_intersection_checking\n\nfunction area(a: point, b: point, c: point) {\n\treturn (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n}\n\nfunction intersect_1(a: number, b: number, c: number, d: number) {\n\tif (a > b) [a, b] = [b, a];\n\tif (c > d) [c, d] = [d, c];\n\treturn Math.max(a, c) <= Math.min(b, d);\n}\n\nexport function intersect(a: point, b: point, c: point, d: point) {\n\treturn intersect_1(a.x, b.x, c.x, d.x)\n\t\t&& intersect_1(a.y, b.y, c.y, d.y)\n\t\t&& area(a, b, c) * area(a, b, d) <= 0\n\t\t&& area(c, d, a) * area(c, d, b) <= 0;\n}\n", "import { portal_pad } from \"./draw.js\";\nimport { Planet } from \"./planets.js\";\nimport { Star } from \"./stars.js\";\n\nfunction calc_xy(value: number, size: number): [number, number] {\n\tvar x = Math.cos(value / 180 * Math.PI);\n\tvar y = -Math.sin(value / 180 * Math.PI);\n\tvar scale = 1 / Math.max(Math.abs(x), Math.abs(y));\n\t// size-=1;\n\tsize += portal_pad;\n\tx = x * scale * size / 2 + size / 2 - portal_pad / 2;//+0.5;\n\ty = y * scale * size / 2 + size / 2 - portal_pad / 2;//+0.5;\n\treturn [x, y];\n}\n\nexport class Direction {\n\ttarget: Star | undefined; //something this vector points at, can be null - not used by the class itself\n\tx: number; y: number; // portal coordinates, calculated during creation\n\t#value: number; //angle, value can be -179..+180.\n\tlist: Directions; //optional, list which this direction is part of\n\t// We could limit it to 0..360, but it would complicate calculating \"to the left\"/\"to the right\" values\n\tconstructor(value: number, owner: Star, target?: Star) {\n\t\tthis.value = value;\n\t\tthis.target = target;\n\t\t[this.x, this.y] = calc_xy(value, owner.size);\n\t}\n\tstatic normalize(value: number): number {\n\t\twhile (value <= -180) value += 360;\n\t\twhile (value > +180) value -= 360;\n\t\treturn value;\n\t}\n\tget value() { return this.#value }\n\tset value(value) { this.#value = Direction.normalize(value) }\n\tangleTo(value: number | Direction) {\n\t\tif (value instanceof Direction) return this.angleTo(value.value);\n\t\treturn Direction.normalize(value - this.#value);\n\t}\n\tpositiveAngleTo(value: number | Direction): number {\n\t\tconst angle = this.angleTo(value);\n\t\tif (angle < 0) return angle + 360;\n\t\treturn angle;\n\t}\n\t// // functions which return value (angle between two vectors, or their sum)\n\tadd(value: number) {\n\t\t//if(value instanceof Direction) return this.add(value.value);\n\t\treturn Direction.normalize(this.#value + value);\n\t}\n\t// sub(value){\n\t// \tif(value instanceof Direction) return this.sub(value.value);\n\t// \treturn Direction.normalize(this.#value - value);\n\t// }\n\t// // functions which change value of this vector\n\t// inc(value){ this.#value = this.add(value) }\n\t// dec(value){ this.#value = this.sub(value) }\n\t// // handy functions which propagate to parent list\n\t// // they will return 'undefined' if this.list is not set\n\t// next() { return this.list && this.list.next(this) }\n\t// prev() { return this.list && this.list.prev(this) }\n\t// left() { return this.list && this.list.left(this) }\n\t// right() { return this.list && this.list.right(this) }\n}\n\nexport class Directions {\n\t#list: Direction[]; // ordered list of directions\n\towner: Star; // star, to which this list belongs to\n\tconstructor(owner: Star) {\n\t\tthis.#list = [];\n\t\tthis.owner = owner;\n\t}\n\t*[Symbol.iterator]() {\n\t\tfor (var item of this.#list) yield item;\n\t}\n\tadd(new_item: Direction) {\n\t\t// console.trace(`adding ${new_item.value} to ${this.owner.name}`);\n\t\tlet index = this.#list.findIndex(item => item.value > new_item.value);\n\t\tif (index < 0) index = this.#list.length;\n\t\tthis.#list.splice(index, 0, new_item);\n\t\tnew_item.list = this;\n\t}\n\t// returns index of whatever is passed - either Direction, or is value\n\tindexOf(value: number | Direction | Star): number {\n\t\tif (value instanceof Direction) return this.#list.indexOf(value);\n\t\tif (typeof value == \"number\") {\n\t\t\tvalue = Direction.normalize(value);\n\t\t\treturn this.#list.findIndex(item => item.value == value);\n\t\t} else {\n\t\t\treturn this.#list.findIndex(item => item.target == value);\n\t\t}\n\t}\n\tangleBetween(a: number | Star | Direction, b: number | Star | Direction): number {\n\t\tconst aa = (a instanceof Direction) ? a : this.directionOf(a);\n\t\tconst bb = (b instanceof Direction) ? b : this.directionOf(b);\n\t\tif (aa == null || bb == null) throw new ReferenceError(`either ${a} or ${b} is not part of this list`);\n\t\treturn aa.angleTo(bb);\n\t}\n\tget count() { return this.#list.length }\n\t// returns Direction object with given target, or null if none found\n\tdirectionOf(value: number | Star | Direction): Direction {\n\t\tlet index = this.indexOf(value);\n\t\tif (index < 0) throw ReferenceError(\"${item} is not part of ${this} directions list\");\n\t\treturn this.#list[index];\n\t}\n\t// insert new item, or set a target of an existing one\n\tlink(value: number, target?: Star) {\n\t\tlet index = this.indexOf(value);\n\t\tif (index < 0) {\n\t\t\tthis.add(new Direction(value, this.owner, target));\n\t\t} else {\n\t\t\tthis.#list[index].target = target;\n\t\t}\n\t}\n\t// functions to navigate the list\n\t// if item is not in the list - returns first or last element\n\tnext(item: number | Star | Direction): Direction {\n\t\tlet index = this.indexOf(item);\n\t\tif (index < 0) throw ReferenceError(\"${item} is not part of ${this} directions list\");\n\t\treturn this.#list[index + 1] || this.#list[0];\n\t}\n\tprev(item: number | Star | Direction): Direction {\n\t\tlet index = this.indexOf(item);\n\t\tif (index < 0) throw ReferenceError(\"${item} is not part of ${this} directions list\");\n\t\treturn this.#list[index - 1] || this.#list.at(-1);\n\t}\n\t// aliases\n\tleft(item: number | Star | Direction) { return this.next(item) }\n\tright(item: number | Star | Direction) { return this.prev(item) }\n}\n", "export function randomInt(a: number, b: number): number {\n\tif (a > b) [a, b] = [b, a];\n\treturn Math.floor(Math.random() * (b - a + 1)) + a;\n}\n\nexport function randomFrom(a: any[]): any {\n\treturn a[Math.floor(Math.random() * a.length)];\n}\n\nexport function shuffle(array: any[]): any[] {\n\treturn array.map((a: any) => ({ sort: Math.random(), value: a }))\n\t\t.sort((a: { sort: number; }, b: { sort: number; }) => a.sort - b.sort)\n\t\t.map((a: { value: any; }) => a.value)\n}\n\nexport function seq(a: number): number[] {\n\treturn [...Array(a).keys()]\n\t//=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n", "import { shuffle, seq } from \"./utils\";\n\nexport type PlanetType = [string, string | null, string | null, string, string];\n\nexport const resources = ['water', 'iron', 'food', 'radioactives'];\nvar planetTypes = (function () {\n\tvar colors = ['blue', 'yellow', 'green', 'red'];\n\tvar planetNamesTable = [ // table: rows: what planet buys; columns: what planet sells; value: planet name\n\t\t[null, 'water-mining', 'farming', 'burning'],\n\t\t['ice', null, 'hunting', 'fire'],\n\t\t['fishy', 'bio-mining', null, 'nuclear'],\n\t\t['frozen', 'hot mining', 'ice-farming', null]];\n\n\tvar ret: PlanetType[] = [\n\t\t['ocean', null, 'water', 'navy', 'blue'],\n\t\t['dry', 'water', null, 'blue', 'white'],\n\t\t['mining', null, 'iron', 'olive', 'yellow'],\n\t\t['populated', 'food', null, 'green', 'lime']];\n\n\tfor (var buy = 0; buy < 4; buy++) {\n\t\tfor (var sell = 0; sell < 4; sell++) {\n\t\t\tif (buy == sell) continue;\n\t\t\tret.push([planetNamesTable[buy][sell] as string, resources[buy], resources[sell], colors[buy], colors[sell]])\n\t\t}\n\t}\n\treturn ret;\n})();\n\nexport class Planet {\n\tx: number; y: number;\n\ttype: number;\n\tname: string;\n\tbuys: string | null;\n\tsells: string | null;\n\tcolor_in: string;\n\tcolor_out: string;\n\tconstructor(x: number, y: number, type_n: number) {\n\t\tvar type = planetTypes[type_n];\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.type = type_n;\n\t\tthis.name = type[0];\n\t\tthis.buys = type[1];\n\t\tthis.sells = type[2];\n\t\tthis.color_in = type[3];\n\t\tthis.color_out = type[4];\n\t}\n\tsave() {\n\t\treturn [this.x, this.y, this.type];\n\t}\n}\n\nfunction isBad(x: number, y: number, size: number) {\n\tvar center = size / 2;\n\treturn x < center + 0.6 && x > center - 0.6 && y < center + 0.6 && y > center - 0.6;\n}\n\nexport function makePlanets(size: number) {\n\tvar thisPlanetTypes = shuffle(seq(planetTypes.length));\n\tfor (var _n = 0; _n < 100; _n++) {\n\t\tvar bad = false;\n\t\tvar ret: [number, number, PlanetType][] = [];\n\t\tvar xx = shuffle(seq(size));\n\t\tvar yy = shuffle(seq(size));\n\t\t// console.log(_n,xx,yy);\n\t\tvar center = size / 2;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tif (isBad(xx[i] + 0.5, yy[i] + 0.5, size)) {\n\t\t\t\tbad = true;\n\t\t\t}\n\t\t\tret.push([xx[i] + 0.5, yy[i] + 0.5, thisPlanetTypes[i]]);\n\t\t}\n\t\tif (!bad) return ret;\n\t}\n\tconsole.error('should not be here');\n\treturn [];\n}\n", "// 1. copypaste table from https://www.cssportal.com/css3-color-names/ to vim\n// 2. :%s/^\\t\\([^\\t]*\\)\\t#[^\\t]*\\t/['\\1', /\n// 3. :%s/$/],/\n// 4. copypaste from vim to JS console, assign to var data=[...]\n// 5. use RGBToHSL function from https://css-tricks.com/converting-color-spaces-in-javascript/, modified to return only 'l' as number\n// 6. out=data.map(x=>[x[0],RGBToHSL(x[1],x[2],x[3])])\n\nimport { Directions, Direction } from \"./angle.js\";\nimport { portals_ext } from \"./draw.js\";\nimport { makePlanets, Planet, PlanetType, resources } from \"./planets.js\";\nimport { seq, randomFrom, randomInt } from \"./utils.js\";\n\n// 7. prompt('',JSON.stringify(out.filter(x=>x[1]>40).map(x=>x[0])))\nvar starColors = [\"AliceBlue\", \"AntiqueWhite\", \"Aqua\", \"Aquamarine\", \"Azure\", \"Beige\", \"Bisque\", \"BlanchedAlmond\", \"Blue\", \"BlueViolet\", \"Brown\", \"BurlyWood\", \"CadetBlue\", \"Chartreuse\", \"Chocolate\", \"Coral\", \"CornflowerBlue\", \"Cornsilk\", \"Crimson\", \"Cyan\", \"DarkGray\", \"DarkGrey\", \"DarkKhaki\", \"DarkOrange\", \"DarkOrchid\", \"DarkSalmon\", \"DarkSeaGreen\", \"DarkTurquoise\", \"DarkViolet\", \"DeepPink\", \"DeepSkyBlue\", \"DimGray\", \"DodgerBlue\", \"FireBrick\", \"FloralWhite\", \"Fuchsia\", \"Gainsboro\", \"GhostWhite\", \"Gold\", \"Goldenrod\", \"Gray\", \"GreenYellow\", \"Grey\", \"Honeydew\", \"HotPink\", \"IndianRed\", \"Ivory\", \"Khaki\", \"Lavender\", \"LavenderBlush\", \"LawnGreen\", \"LemonChiffon\", \"LightBlue\", \"LightCoral\", \"LightCyan\", \"LightGoldenrodYellow\", \"LightGray\", \"LightGreen\", \"LightGrey\", \"LightPink\", \"LightSalmon\", \"LightSeaGreen\", \"LightSkyBlue\", \"LightSlateGray\", \"LightSlateGrey\", \"LightSteelBlue\", \"LightYellow\", \"Lime\", \"LimeGreen\", \"Linen\", \"Magenta\", \"MediumAquamarine\", \"MediumBlue\", \"MediumOrchid\", \"MediumPurple\", \"MediumSeaGreen\", \"MediumSlateBlue\", \"MediumSpringGreen\", \"MediumTurquoise\", \"MediumVioletRed\", \"MintCream\", \"MistyRose\", \"Moccasin\", \"NavajoWhite\", \"OldLace\", \"Orange\", \"OrangeRed\", \"Orchid\", \"PaleGoldenrod\", \"PaleGreen\", \"PaleTurquoise\", \"PaleVioletRed\", \"PapayaWhip\", \"PeachPuff\", \"Peru\", \"Pink\", \"Plum\", \"PowderBlue\", \"Red\", \"RosyBrown\", \"RoyalBlue\", \"Salmon\", \"SandyBrown\", \"Seashell\", \"Sienna\", \"Silver\", \"SkyBlue\", \"SlateBlue\", \"SlateGray\", \"SlateGrey\", \"Snow\", \"SpringGreen\", \"SteelBlue\", \"Tan\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Wheat\", \"White\", \"WhiteSmoke\", \"Yellow\", \"YellowGreen\"];\n\nfunction mkgrid(star: Star, size: number) {\n\tvar grid: (Star | undefined)[][] = seq(size + 2 * portals_ext).map(x => []);\n\tvar center = (size - 1) / 2;\n\tfor (var x = Math.floor(center); x <= Math.ceil(center); x++) {\n\t\tfor (var y = Math.floor(center); y <= Math.ceil(center); y++) {\n\t\t\tgrid[x + 1 * portals_ext][y + 1 * portals_ext] = star;\n\t\t}\n\t}\n\treturn grid;\n}\n\nfunction countJobs(planets: Planet[]) {\n\tvar data = { 'null': { buys: 0, sells: 0 } };\n\tresources.forEach(x => { data[x] = { buys: 0, sells: 0 } });\n\tplanets.forEach((planet: Planet) => { data[String(planet.buys)].buys++; data[String(planet.sells)].sells++ });\n\tvar jobs = 0;\n\tresources.forEach(x => { jobs += Math.min(data[x].buys, data[x].sells) });\n\treturn jobs;\n}\n\nexport interface StarData {\n\tc: string,\n\ts: number,\n\tn: number[] | false,\n\tp: [number, number, PlanetType][] | false,\n\tv: boolean,\n}\n\nexport class Star {\n\tcolor: string;\n\tsize: number;\n\tvisited: boolean;\n\tx: number; y: number;\n\tbright: boolean;\n\tname: string;\n\tneighbours: Directions;\n\tgrid: (Star | Planet | undefined)[][];\n\tplanets: Planet[];\n\tjobs: number;\n\n\tconstructor(load?: StarData) {\n\t\tif (!load) {\n\t\t\tload = {\n\t\t\t\tc: randomFrom(starColors),\n\t\t\t\ts: randomInt(5, 9),\n\t\t\t\tn: false,\n\t\t\t\tp: false,\n\t\t\t\tv: false,\n\t\t\t}\n\n\t\t}\n\t\t// TODO: make sure colors don't repeat\n\t\tthis.color = load.c;\n\t\tthis.size = load.s;\n\t\tthis.visited = load.v;\n\t\tthis.x = this.y = this.size / 2;\n\t\tthis.bright = false;\n\t\tthis.name = this.color;\n\t\tif (this.size % 2 == 0) {\n\t\t\tthis.bright = true;\n\t\t\tthis.name = 'bright ' + this.name;\n\t\t}\n\t\tthis.neighbours = new Directions(this);\n\t\tif (load.n) {\n\t\t\tfor (var value of load.n) {\n\t\t\t\tthis.neighbours.add(new Direction(value, this));\n\t\t\t}\n\t\t}\n\t\tthis.grid = mkgrid(this, this.size);\n\t\tif (!load.p) load.p = makePlanets(this.size); //from planets.js\n\t\tthis.planets = load.p.map((x: any) => new Planet(...x));\n\t\tfor (var planet of this.planets) {\n\t\t\tthis.grid[Math.floor(planet.x) + 1 * portals_ext][Math.floor(planet.y) + 1 * portals_ext] = planet;\n\t\t}\n\t\tthis.jobs = countJobs(this.planets);\n\t}\n\n\tlink(other: Star, direction: number | Direction) {\n\t\tif (direction instanceof Direction) {\n\t\t\tdirection.target = other;\n\t\t\tother.neighbours.link(direction.value + 180, this);\n\t\t} else {\n\t\t\tthis.neighbours.link(direction, other);\n\t\t\tother.neighbours.link(direction + 180, this);\n\t\t}\n\t}\n\n\tsave() {\n\t\treturn {\n\t\t\tc: this.color,\n\t\t\ts: this.size,\n\t\t\tn: Array.from(this.neighbours).map(x => x.value),\n\t\t\tp: this.planets.map(x => x.save()),\n\t\t\tv: this.visited,\n\t\t};\n\t}\n}\n\n", "import { Direction } from \"./angle.js\";\nimport { flightplan } from \"./flightplan.js\";\nimport { Star, StarData } from \"./stars.js\";\nimport { randomInt } from \"./utils.js\";\n\nexport var player_star: Star;\nexport function set_player_star(x: Star) { player_star = x };\n\n// Universe is just one star with its neighbours\nexport const default_universe = '{\"v\":1,\"s\":{\"c\":\"Yellow\",\"s\":4,\"n\":[-134,-71,-18,34,110,177],\"p\":[[2.5,0.5,3],[1.5,3.5,0],[3.5,2.5,5]],\"v\":false},\"n\":[{\"c\":\"LightGreen\",\"s\":5,\"n\":[-145,-80,-8,46,99,151],\"p\":[[4.5,2.5,2],[1.5,0.5,9],[3.5,3.5,7],[2.5,1.5,12],[0.5,4.5,11]],\"v\":0},{\"c\":\"LightGray\",\"s\":5,\"n\":[-128,-77,-27,46,109,172],\"p\":[[2.5,4.5,1],[3.5,2.5,9],[1.5,1.5,10],[0.5,3.5,15],[4.5,0.5,0]],\"v\":false},{\"c\":\"Peru\",\"s\":5,\"n\":[-134,-79,-52,-9,34,98,162],\"p\":[[1.5,2.5,9],[4.5,1.5,6],[2.5,4.5,2],[3.5,0.5,0],[0.5,3.5,12]],\"v\":false},{\"c\":\"Bisque\",\"s\":5,\"n\":[-146,-82,-19,9,52,94,169],\"p\":[[3.5,1.5,4],[1.5,3.5,9],[2.5,4.5,14],[0.5,2.5,2],[4.5,0.5,10]],\"v\":false},{\"c\":\"LightBlue\",\"s\":6,\"n\":[-137,-70,-11,41,92,156],\"p\":[[1.5,3.5,13],[4.5,5.5,4],[5.5,2.5,6],[3.5,0.5,15],[2.5,4.5,3],[0.5,1.5,0]],\"v\":false},{\"c\":\"LightSeaGreen\",\"s\":5,\"n\":[-144,-81,-3,43,88,154],\"p\":[[4.5,2.5,13],[3.5,4.5,14],[1.5,0.5,7],[2.5,3.5,11],[0.5,1.5,3]],\"v\":1}],\"f\":{\"x\":-0.25,\"y\":1.882,\"c\":null},\"st\":{\"p\":0,\"s\":0,\"jf\":0,\"js\":0}}';\n\n// function task(){\n// \tvar a=0.5, b=1; //coords of home planet\n// \tvar r=0.25; // radius of planet/orbit height\n// \tvar x0=1.5, y0=3.5; // coords of dest planet\n// \tconsole.log(`solve (x1-${a})^2+(y1-${b})^2=${r}^2, (${x0}-x1)*(x1-${a})+(${y0}-y1)*(y1-${b})=0 for x1,y1`)\n// \t// x1\u22480.277504 \u2227 y1\u22481.114\n// }\n\nfunction measureAngle(x: Star, a: Star | Direction, b: Star | Direction) {\n\treturn x.neighbours.directionOf(a).angleTo(x.neighbours.directionOf(b));\n}\n\n// move player from one star to the new one\nexport function moveToNewStar(star: Star, oldStar: Star) {\n\t// 1. create new systems\n\tvar newStars: Star[] = [];\n\tfor (var connection of star.neighbours) {\n\t\tif (!connection.target) {\n\t\t\tvar newStar = new Star();\n\t\t\tstar.link(newStar, connection);\n\t\t\tnewStars.push(newStar);\n\t\t}\n\t}\n\t// 2. connect systems to existing neighbours\n\t// console.log(star.neighbours,oldStar);\n\tvar commonNeighbour = star.neighbours.left(oldStar).target;\n\tif (!commonNeighbour) throw ReferenceError(`${star} and ${oldStar} have no common neighbour on the left`);\n\tvar newNeighbour = star.neighbours.left(commonNeighbour).target;\n\tif (!newNeighbour) throw ReferenceError(`${star} has no neighbour to the left from common neighbour`);\n\tvar connectionToUse = commonNeighbour.neighbours.right(star);\n\tcommonNeighbour.link(newNeighbour, connectionToUse);\n\t//2.5\n\tvar a: number = commonNeighbour.neighbours.angleBetween(\n\t\tcommonNeighbour.neighbours.right(newNeighbour),\n\t\tnewNeighbour);\n\tvar newValue = randomInt(100 - a, Math.min(160 - a, 80));\n\tconsole.log(`setting new angle to ${newValue} to have triangle ${a} - ${newValue} - ${180 - a - newValue}`);\n\tnewDirection = new Direction(newNeighbour.neighbours.directionOf(commonNeighbour).add(newValue), newNeighbour);\n\tnewNeighbour.neighbours.add(newDirection);\n\t// console.log(`reused existing connection from ${commonNeighbour.name} to link to ${newNeighbour.name}`);\n\t// console.log(`got angles: ${measureAngle(star,commonNeighbour,newNeighbour)}, ${measureAngle(commonNeighbour,newNeighbour,star)}, ${measureAngle(newNeighbour,star,commonNeighbour)}`);\n\t// console.log('connecting',commonNeighbour.name,newNeighbour.name);\n\t// 2.\n\tvar commonNeighbour = star.neighbours.right(oldStar).target;\n\tif (!commonNeighbour) throw ReferenceError(`${star} and ${oldStar} have no common neighbour on the right`);\n\tvar newNeighbour = star.neighbours.right(commonNeighbour).target;\n\tif (!newNeighbour) throw ReferenceError(`${star} has no neighbour to the right from common neighbour`);\n\tvar connectionToUse = commonNeighbour.neighbours.left(star);\n\tcommonNeighbour.link(newNeighbour, connectionToUse);\n\t// 2.5\n\tvar a: number = commonNeighbour.neighbours.angleBetween(\n\t\tnewNeighbour,\n\t\tcommonNeighbour.neighbours.left(newNeighbour));\n\t// console.log('random number between',100-a,Math.min(160-a,80));\n\tvar newValue = randomInt(100 - a, Math.min(160 - a, 80));\n\tconsole.log(`setting new angle to ${newValue} to have triangle ${a} - ${newValue} - ${180 - a - newValue}`);\n\tnewDirection = new Direction(newNeighbour.neighbours.directionOf(commonNeighbour).add(-newValue), newNeighbour);\n\tnewNeighbour.neighbours.add(newDirection);\n\t// console.log(`reused existing connection from ${commonNeighbour.name} to link to ${newNeighbour.name}`);\n\t// console.log(`got angles: ${measureAngle(star,newNeighbour,commonNeighbour)}, ${measureAngle(commonNeighbour,star,newNeighbour)}, ${measureAngle(newNeighbour,commonNeighbour,star)}`);\n\t// console.log('connecting',commonNeighbour.name,newNeighbour.name);\n\t// 3. link new systems to each other\n\tfor (var leftStar of newStars) {\n\t\tvar leftDirection = star.neighbours.directionOf(leftStar);\n\t\tvar rightDirection = star.neighbours.right(leftDirection);\n\t\tvar rightStar = rightDirection.target;\n\t\tif (!rightStar) throw ReferenceError(`${star} has no neighbour to the right from ${leftStar}`);\n\t\tif (newStars.indexOf(rightStar) < 0) continue;\n\t\t// if(star.neighbours.left(rightStar).target!=leftStar) [leftStar, rightStar] = [rightStar, leftStar];\n\t\tif (star.neighbours.left(rightStar).target != leftStar) console.error('e0', leftStar, rightStar);\n\t\tif (leftDirection.target != leftStar) console.error('e1', leftDirection, leftStar);\n\t\tvar bisect = leftDirection.add(Math.round(leftDirection.angleTo(rightDirection) / 2));\n\t\t// var bisect = (leftDirection.value+rightDirection.value)/2;\n\t\t// if(leftDirection.value >90 && rightDirection.value<90) bisect+=180;\n\t\tconsole.log(`linking ${leftStar.name} and ${rightStar.name}`);\n\t\t// console.log(`bisect of ${leftDirection.value} and ${rightDirection.value} is ${bisect} (shold be ${(leftDirection.value+rightDirection.value)/2})`);\n\t\tleftStar.link(rightStar, bisect - 90);\n\t\t// console.log(`check: ${leftStar.neighbours.directionOf(rightStar).value} and ${rightStar.neighbours.directionOf(leftStar).value}`);\n\t\t// 3.5\n\t\tvar a: number = randomInt(20, 80);\n\t\tvar b = randomInt(100 - a, Math.min(160 - a, 80));\n\t\tif (180 - a - b < 20 || 180 - a - b > 80) console.error('e3', a, b);\n\t\tvar newDirection = new Direction(leftStar.neighbours.directionOf(rightStar).add(a), leftStar);\n\t\tleftStar.neighbours.add(newDirection);\n\t\tvar newDirection = new Direction(rightStar.neighbours.directionOf(leftStar).add(-b), rightStar);\n\t\trightStar.neighbours.add(newDirection);\n\t}\n\t// 4. add new (empty) connections\n\tfor (var newStar of newStars) {\n\t\tvar fromDirection = newStar.neighbours.next(newStar.neighbours.next(star));\n\t\tvar toDirection = newStar.neighbours.prev(newStar.neighbours.prev(star));\n\t\tvar degreesToSplit = fromDirection.positiveAngleTo(toDirection);\n\t\t// if(degreesToSplit<180) console.error('e2',newStar);\n\t\t// var minValue=randomInt(50,80);\n\t\t// var maxValue=degreesToSplit-randomInt(50,80);\n\t\t// console.log(`splitting for ${newStar.name}`, newStar.neighbours);\n\t\t// console.log(`filling between ${fromDirection.target.name} (${fromDirection.value}) and ${toDirection.target.name} (${toDirection.value})`);\n\t\t// console.log(`splitting ${degreesToSplit} from ${minValue} (${fromDirection.add(minValue)}) to ${maxValue} (${fromDirection.add(maxValue)})`);\n\t\tvar lastAdded = 0;\n\t\tfor (var newValue = randomInt(20, 80); newValue < degreesToSplit - 20; newValue += randomInt(20, 80)) {\n\t\t\tconsole.log(`got ${newValue} will be ${fromDirection.add(newValue)}`);\n\t\t\t// without second argument, 'link' adds direction without a target\n\t\t\t// newStar.neighbours.link(fromDirection.add(newValue));\n\t\t\tvar newDirection = new Direction(fromDirection.add(newValue), newStar);\n\t\t\tnewStar.neighbours.add(newDirection);\n\t\t\tlastAdded = newValue;\n\t\t}\n\t\tconsole.log(`loop done with ${(degreesToSplit - lastAdded)} gap`);\n\t\tif (degreesToSplit - lastAdded > 80) {\n\t\t\tnewValue = randomInt(lastAdded + 20, degreesToSplit - 20);\n\t\t\tconsole.log(`adding ${newValue} (will be ${fromDirection.add(newValue)}) to fill the gap`);\n\t\t\tnewDirection = new Direction(fromDirection.add(newValue), newStar);\n\t\t\tnewStar.neighbours.add(newDirection);\n\t\t}\n\t\t// console.log(`also ${newValue} will be ${fromDirection.add(newValue)}`);\n\t\t// fromDirection=new Direction(fromDirection.add(newValue), newStar);\n\t\t// newStar.neighbours.add(fromDirection);\n\t\t// console.log(`adding last ${maxValue} will be ${fromDirection.add(maxValue)}`);\n\t\t// newDirection=new Direction(fromDirection.add(maxValue), newStar);\n\t\t// newStar.neighbours.add(newDirection);\n\t\t// newStar.makePlanets();\n\t}\n\t//*\n\t// 5. clean up\n\tvar keepNeighbours = [star, star.neighbours.left(oldStar).target, star.neighbours.right(oldStar).target];\n\tfor (var oldConnection of oldStar.neighbours) {\n\t\tif (keepNeighbours.indexOf(oldConnection.target) < 0) {\n\t\t\toldConnection.target = undefined;\n\t\t}\n\t}\n\tstar.neighbours.left(oldStar).target.neighbours.left(oldStar).target = undefined;\n\tstar.neighbours.right(oldStar).target.neighbours.right(oldStar).target = undefined;\n\t//*/\n}\n\nexport interface Stats {\n\ts: number,\n\tp: number,\n\tjs: number,\n\tjf: number\n};\n\nexport var stats: Stats;\n\nexport function saveUniverse() {\n\treturn {\n\t\tv: 1,\n\t\ts: player_star.save(),\n\t\tn: Array.from(player_star.neighbours).map(n => (n.target as Star).save()),\n\t\tf: {\n\t\t\tx: flightplan.steps[0].x,\n\t\t\ty: flightplan.steps[0].y,\n\t\t\tc: flightplan.steps[0].cargo\n\t\t},\n\t\tst: stats,\n\t}\n}\n\nexport function loadUniverse(data: { v: number; s: StarData; n: StarData[]; f: { x: number; y: number; c: string | null; }; st: Stats; }) {\n\tif (data.v != 1) return;\n\tplayer_star = new Star(data.s);\n\tvar newStars: Star[] = [];\n\tfor (var i = 0; i < data.n.length; i++) {\n\t\tvar newStar = new Star(data.n[i]);\n\t\tnewStars.push(newStar);\n\t\tplayer_star.link(newStar, data.s.n[i]);\n\t}\n\t// link neighbours to each other\n\tfor (var leftStar of newStars) {\n\t\tvar rightStar = player_star.neighbours.right(leftStar).target as Star;\n\t\tleftStar.neighbours.left(player_star).target = rightStar;\n\t\trightStar.neighbours.right(player_star).target = leftStar;\n\t}\n\tflightplan.init(data.f.x, data.f.y, data.f.c, document.getElementById('myFlightplan') as HTMLDivElement);\n\tstats = data.st;\n}\n\nexport function check() {\n\tvar ok = true;\n\tfor (var c of player_star.neighbours) {\n\t\tif (!c.target) {\n\t\t\tconsole.error('player_star has no neighbour at', c.value);\n\t\t\tok = false;\n\t\t\tcontinue;\n\t\t}\n\t\tif (Direction.normalize(c.value + 180) != c.target.neighbours.directionOf(player_star).value) {\n\t\t\tconsole.error('player_star and ... dont point to each other', c.target.name,\n\t\t\t\tDirection.normalize(c.value + 180), c.target.neighbours.directionOf(player_star).value\n\t\t\t);\n\t\t\tok = false;\n\t\t}\n\t\tif (player_star.neighbours.left(c).target != c.target.neighbours.right(player_star).target) {\n\t\t\tconsole.error('left (as seen from player_star) and right from ... dont match', c.target.name)\n\t\t\tok = false;\n\t\t}\n\t\tif (player_star.neighbours.right(c).target != c.target.neighbours.left(player_star).target) {\n\t\t\tconsole.error('right (as seen from player_star) and left from ... dont match', c.target.name);\n\t\t\tok = false;\n\t\t}\n\t\tvar dirToNextNeighbour = c.target.neighbours.next(player_star);\n\t\tvar nextNeighbour = dirToNextNeighbour.target;\n\t\tif (!nextNeighbour) {\n\t\t\tconsole.error('player_star has no neighbour after', c.target.name);\n\t\t\tok = false;\n\t\t\tcontinue;\n\t\t}\n\t\tif (nextNeighbour.neighbours.directionOf(c.target).value != Direction.normalize(dirToNextNeighbour.value + 180)) {\n\t\t\tconsole.error('neighbours dont point to each other', c.target.name, nextNeighbour.name,\n\t\t\t\tnextNeighbour.neighbours.directionOf(c.target).value, Direction.normalize(dirToNextNeighbour.value + 180));\n\t\t\tok = false;\n\t\t}\n\t\tif (measureAngle(c.target, c.target.neighbours.prev(nextNeighbour), nextNeighbour) +\n\t\t\tmeasureAngle(nextNeighbour, c.target, nextNeighbour.neighbours.next(c.target)) < 100) {\n\t\t\tconsole.error('future common neighbour of two neighbours will have bad angle', c.target.name, nextNeighbour.name,\n\t\t\t\t180 - measureAngle(c.target, c.target.neighbours.prev(nextNeighbour), nextNeighbour) -\n\t\t\t\tmeasureAngle(nextNeighbour, c.target, nextNeighbour.neighbours.next(c.target)));\n\t\t\tok = false;\n\t\t}\n\t\tvar badAngles = Array.from(c.target.neighbours).map((x) => x.angleTo(c.target.neighbours.next(x))).filter(x => Math.abs(x) < 20 || Math.abs(x) > 80);\n\t\tif (badAngles.length) {\n\t\t\tconsole.error('neighbour has bad angles', c.target.name, badAngles);\n\t\t\tok = false;\n\t\t}\n\t\t// if(!ok) return ok;\n\t}\n\tvar badAngles = Array.from(player_star.neighbours).map((x) => x.angleTo(player_star.neighbours.next(x))).filter(x => Math.abs(x) < 20 || Math.abs(x) > 80);\n\tif (badAngles.length) {\n\t\tconsole.error('player_star has bad angles');\n\t\tok = false;\n\t}\n\treturn ok;\n}\n", "import { Direction, Directions } from \"./angle.js\";\nimport { cell_size, portal_pad, portal_size, planet_size, portals_ext } from \"./draw.js\";\nimport { flightplan } from \"./flightplan.js\";\nimport { mode, redraw } from \"./index.js\";\nimport { Planet } from \"./planets.js\";\nimport { Star } from \"./stars.js\";\nimport { player_star } from \"./universe.js\";\n\nexport var shown_star: Star;\n\nexport function set_shown_star(x: Star) { shown_star = x };\n\n// var grid=[];\nvar hintTarget: HTMLElement;\nvar visibleStar: Star;\n\nexport function setupHints(star: Star, canvas: HTMLCanvasElement, hintTargetObj: HTMLElement) {\n\tvisibleStar = star;\n\tcanvas.onmousemove = hint;\n\thintTarget = hintTargetObj;\n\tcanvas.onmouseleave = function () { hintTarget.innerText = 'Hover an object on the map to see what it is' };\n\tcanvas.onclick = click;\n}\n\nfunction hintText(obj: Direction | Star | Planet): string[] {\n\tif (obj instanceof Direction) {\n\t\tif (!obj.target) return ['Portal to unknown' + (mode == 'test' ? ' at' + obj.value : '')];\n\t\tvar ret = ['Portal to ' + hintText(obj.target) + (mode == 'test' ? ' at' + obj.value : '')];\n\t\tif (mode == 'flyi') return ret;\n\t\tif (shown_star == player_star) {\n\t\t\tif (Math.abs(obj.x - flightplan.steps[0].x) < 0.001 &&\n\t\t\t\tMath.abs(obj.y - flightplan.steps[0].y) < 0.001) {\n\t\t\t\tret.push('(you are here)');\n\t\t\t} else {\n\t\t\t\tvar reason = flightplan.cantJumpTo(obj.target, obj);\n\t\t\t\tif (reason) ret.push(\"You can't travel there: \" + reason);\n\t\t\t\telse ret.push(\"You can travel there\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (obj.target == player_star) ret = ret.concat(['(you are there)', 'Click to return']);\n\t\t\telse if (obj.target.visited) ret.push(\"(you've been there before)\");\n\t\t}\n\t\tif (obj.target != player_star) {\n\t\t\tret.push('Click to explore');\n\t\t}\n\t\treturn ret;\n\t} else if (obj instanceof Planet) {\n\t\tvar ret = [obj.name + ' planet'];\n\t\tif (obj.buys) ret.push('Buys: ' + obj.buys);\n\t\tif (obj.sells) ret.push('Sells: ' + obj.sells);\n\t\tif (shown_star == player_star && mode != 'flyi') {\n\t\t\tvar reason = flightplan.cantTravelTo(obj);\n\t\t\tif (flightplan.lastStep.planet == obj) {\n\t\t\t\tret.push('Click to remove it from the flight plan');\n\t\t\t} else if (reason) {\n\t\t\t\tret.push(`Can't travel there: ${reason}`);\n\t\t\t} else {\n\t\t\t\tret.push('Click to add it to the flight plan');\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t} else if (obj instanceof Star) {\n\t\treturn [obj.name + ' star'];\n\t}\n\treturn ['Unknown object'];\n}\n\nfunction objAt(x: number, y: number, event: MouseEvent): Star | Planet | Direction | undefined {\n\tvar cell_x = Math.floor(x / cell_size - portal_pad);\n\tvar cell_y = Math.floor(y / cell_size - portal_pad);\n\t// console.log(cell_x,cell_y);\n\tif (cell_x < 0 || cell_x >= visibleStar.size ||\n\t\tcell_y < 0 || cell_y >= visibleStar.size) {\n\t\t// in portal area\n\t\tvar radius = portal_size / cell_size;\n\t\tfor (var neighbour of visibleStar.neighbours) {\n\t\t\tvar dist = Math.hypot(x / cell_size - neighbour.x - portal_pad,\n\t\t\t\ty / cell_size - neighbour.y - portal_pad);\n\t\t\t// console.log(dist,radius);\n\t\t\tif (dist < radius) {\n\t\t\t\t// console.log(neighbour.getText().join('<br>'));\n\t\t\t\treturn neighbour;\n\t\t\t}\n\t\t}\n\t}\n\tif (!visibleStar.grid[cell_x]) return undefined;\n\tvar obj = visibleStar.grid[cell_x][cell_y];\n\tif (!obj) return undefined;\n\t// console.log(obj);\n\tvar radius = planet_size;\n\tvar dist = Math.hypot(event.offsetX - (obj.x + 1 * portals_ext + portal_pad) * cell_size, event.offsetY - (obj.y + 1 * portals_ext + portal_pad) * cell_size);\n\tif (dist < radius) {\n\t\treturn obj;\n\t}\n}\n\nfunction hint(event: MouseEvent) {\n\tconst obj = objAt(event.offsetX, event.offsetY, event);\n\thintTarget.innerHTML = obj ? hintText(obj).join('<br>') : \"Space void\";\n}\n\nfunction click(event: MouseEvent) {\n\tif (mode == 'flyi') return;\n\tconst obj = objAt(event.offsetX, event.offsetY, event);\n\tif (obj instanceof Planet && shown_star == player_star) {\n\t\tif (flightplan.steps.findIndex(x => x.planet == obj) == flightplan.steps.length - 1) {\n\t\t\tflightplan.undo();\n\t\t\tredraw();\n\t\t\tflightplan.element.parentElement.scrollTop = 1000;\n\t\t} else if (!flightplan.cantTravelTo(obj)) {\n\t\t\tflightplan.add(obj);\n\t\t\tredraw();\n\t\t\tflightplan.element.parentElement.scrollTop = 1000;\n\t\t}\n\t}\n\tif (obj instanceof Direction && obj.target) {\n\t\tshown_star = obj.target;\n\t\tredraw();\n\t\thint(event);\n\t}\n\treturn;\n}\n", "import { Direction } from \"./angle.js\";\nimport { planet_size, cell_size } from \"./draw.js\";\nimport { intersect, lineCrossesObj } from \"./geometry.js\";\nimport { shown_star } from \"./hints.js\";\nimport { gebi, mode } from \"./index.js\";\nimport { Planet } from \"./planets.js\";\nimport { Star } from \"./stars.js\";\nimport { player_star } from \"./universe.js\";\n\ninterface flightplanFirstStep {\n\tstart: true,\n\tplanet: { x: number, y: number },\n\tx: number, y: number,\n\tbuy: false,\n\tsell: false,\n\tcargo: string | null,\n}\n\ninterface flightplanStep {\n\tstart: false,\n\tplanet: Planet,\n\tx: number, y: number,\n\tbuy: boolean,\n\tsell: boolean,\n\tcargo: string | null,\n}\n\nclass Flightplan {\n\tsteps: Array<flightplanFirstStep | flightplanStep>;\n\t// visited:[],\n\telement: HTMLElement;\n\tinit(x: number, y: number, cargo: string | null, element: HTMLDivElement) {\n\t\tthis.element = element;\n\t\tthis.steps = [{\n\t\t\tstart: true,\n\t\t\tplanet: { x: x, y: y },\n\t\t\tx: x, y: y,\n\t\t\tbuy: false,\n\t\t\tsell: false,\n\t\t\tcargo: cargo,\n\t\t} as flightplanFirstStep];\n\t};\n\tadd(planet: Planet) {\n\t\tconst oldIndex = this.steps.findIndex(x => x.planet == planet);\n\t\t// if(oldIndex == flightplan.steps.length-1) this.undo();\n\t\tif (oldIndex >= 0) return;\n\t\t// if(this.visited.indexOf(planet)>-1) return;\n\t\t// this.visited.push(planet);\n\t\tvar cargo = this.lastStep.cargo;\n\t\tthis.steps.push({\n\t\t\tstart: false,\n\t\t\tplanet: planet,\n\t\t\tx: planet.x,\n\t\t\ty: planet.y,\n\t\t\tbuy: false,\n\t\t\tsell: false,\n\t\t\tcargo: cargo,\n\t\t} as flightplanStep);\n\t\tthis.updateStep(this.steps.length - 1);\n\t};\n\tundo() {\n\t\t// don't remove first element - it's an initial state - how player arrived to this system\n\t\tif (this.steps.length <= 1) return;\n\t\tthis.steps.pop();\n\t};\n\tcanSell(i: number) {\n\t\tconst step = this.steps[i] as flightplanStep;\n\t\treturn !!step.planet.buys && this.steps[i - 1].cargo == step.planet.buys;\n\t};\n\tsetSell(i: number, value: boolean, dontUpdate: boolean) {\n\t\tif (value && !this.canSell(i)) return;\n\t\tvar step = this.steps[i];\n\t\tstep.sell = value;\n\t\tif (!dontUpdate) this.updateStep(i, true, true);\n\t};\n\tcanBuy(i: number) {\n\t\tconst step = this.steps[i] as flightplanStep;\n\t\treturn !!step.planet.sells && (!this.steps[i - 1].cargo || this.steps[i].sell);\n\t};\n\tsetBuy(i: number, value: boolean, dontUpdate: boolean) {\n\t\tif (value && !this.canBuy(i)) return;\n\t\tconst step = this.steps[i] as flightplanStep;\n\t\tstep.buy = value;\n\t\tif (!dontUpdate) this.updateStep(i, true);\n\t}\n\tupdateStep(i: number, changed?: boolean, noAutoSell?: boolean) {\n\t\t// RECURSIVE\n\t\tif (i >= this.steps.length) return;\n\t\t// console.log('updateStep',i,changed);\n\t\tconst step = this.steps[i] as flightplanStep;\n\t\tif (noAutoSell) {\n\t\t\t// only disables sale if it's impossible\n\t\t\tif (step.sell && !this.canSell(i)) {\n\t\t\t\tstep.sell = false;\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t} else {\n\t\t\t// set sell to its possible value\n\t\t\tif (step.sell != this.canSell(i)) {\n\t\t\t\tstep.sell = this.canSell(i);\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\t\tif (step.buy && !this.canBuy(i)) {\n\t\t\tstep.buy = false;\n\t\t\tchanged = true;\n\t\t}\n\t\tvar new_cargo = step.buy ? step.planet.sells : step.sell ? '' : this.steps[i - 1].cargo;\n\t\tchanged = changed || step.cargo != new_cargo;\n\t\tstep.cargo = new_cargo;\n\t\tif (changed) {\n\t\t\tthis.updateStep(i + 1);\n\t\t}\n\t};\n\tcountJobs() {\n\t\t// count all \"sell\" actions\n\t\treturn this.steps.reduce((a: number, step: flightplanFirstStep | flightplanStep) => a += +step.sell, 0);\n\t};\n\tget lastStep() {\n\t\tconst ret = this.steps.at(-1);\n\t\tif (!ret) throw new ReferenceError(\"flighplan should never be empty\");\n\t\treturn ret;\n\t}\n\tcanPathTo(obj: Planet | Direction) {\n\t\tfor (var i = 1; i < this.steps.length - 1; i++) {\n\t\t\tif (intersect(this.steps[i - 1].planet, this.steps[i].planet,\n\t\t\t\tthis.lastStep.planet, obj))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\tpathToCollidesWith(obj: Planet | Direction): string | false {\n\t\tif (lineCrossesObj(this.lastStep.planet, obj, player_star, 0.5)) return 'star';\n\t\tvar size = planet_size / cell_size;\n\t\t// console.log(obj,this.steps.at(-1).planet);\n\t\tfor (var planet of player_star.planets) {\n\t\t\tif (planet != obj && planet != this.lastStep.planet &&\n\t\t\t\tlineCrossesObj(this.lastStep.planet, obj, planet, size)) return planet.name + ' planet';\n\t\t}\n\t\treturn false;\n\t};\n\tcantTravelTo(planet: Planet) {\n\t\tif (this.steps.findIndex(x => x.planet == planet) >= 0) return 'planet already in flight plan';\n\t\tif (mode == 'easy') return false;\n\t\tif (!this.canPathTo(planet)) return 'crosses existing path';\n\t\tvar name = this.pathToCollidesWith(planet);\n\t\tif (name) return 'path crosses ' + name;\n\t\treturn false;\n\t};\n\tcantJumpTo(star: Star, direction: Direction) {\n\t\tif (star == player_star) return \"you're currently at this star\";\n\t\tif (star.visited) return \"you've already been here\";\n\t\tif (mode == 'easy') return false;\n\t\tif (!this.canPathTo(direction)) return \"path to portal crosses existing path\";\n\t\tvar name = this.pathToCollidesWith(direction);\n\t\tif (name) return 'path crosses ' + name;\n\t\treturn false;\n\t};\n}\n\nexport var flightplan = new Flightplan();\n\nexport function redrawFlightplan() {\n\tvar html = flightplan.steps.map((step, i) => {\n\t\tvar ret: string[] = [];\n\t\tif (step.start) {\n\t\t\tstep = step as flightplanFirstStep;\n\t\t\tret.push(`Arrived to <b>${player_star.name} star</b>` + (step.cargo ? ` with ${step.cargo}` : ''));\n\t\t} else {\n\t\t\tstep = step as flightplanStep;\n\t\t\tret.push(`<div><b>${i}: ${step.planet.name} planet</b>`);\n\t\t\tif (step.planet.buys) ret.push(`<label><input type=\"checkbox\" ${step.sell ? 'checked' : ''} ${flightplan.canSell(i) ? '' : 'disabled'} onchange=\"flightplan.setSell(${i},this.checked);redrawFlightplan()\"> Sell ${step.planet.buys}</label>`);\n\t\t\tif (step.planet.sells) ret.push(`<label><input type=\"checkbox\" ${step.buy ? 'checked' : ''} ${flightplan.canBuy(i) ? '' : 'disabled'} onchange=\"flightplan.setBuy(${i},this.checked);redrawFlightplan()\"> Buy ${step.planet.sells}</label>`);\n\t\t\tret.push(`</div>`);\n\t\t\tif (step.cargo) ret.push(`Travel with ${step.cargo}`);\n\t\t\telse ret.push(`Travel empty`);\n\t\t}\n\t\treturn ret.join(' ');\n\t}).join(' ');\n\tflightplan.element.innerHTML = html;\n\tgebi('fp_undo').style.display = flightplan.steps.length <= 1 ? 'none' : '';\n\tgebi('fp_hint').style.display = (shown_star == player_star) ? '' : 'none';\n\n\tgebi('fp_jobs_done').innerText = '' + flightplan.countJobs();\n\tgebi('fp_jobs_total').innerText = '' + player_star.jobs;\n\t// document.getElementById('fp_jobs_prc').innerText=Math.round(flightplan.countJobs()/player_star.jobs*100);\n\n\tgebi('fp_jump').style.display = (shown_star == player_star) ? 'none' : '';\n\tif (shown_star != player_star) {\n\t\tvar reason = flightplan.cantJumpTo(shown_star, player_star.neighbours.directionOf(shown_star));\n\t\tgebi('fp_jump_ok').style.display = reason ? 'none' : '';\n\t\tgebi('fp_jump_ok_star').innerText = shown_star.name + ' star';\n\t\tgebi('fp_jump_ok_jobs').innerText = '' + shown_star.jobs;\n\t\tgebi('fp_jump_no').style.display = reason ? '' : 'none';\n\t\tgebi('fp_jump_no_reason').innerText = reason || '';\n\t}\n}\n", "import { Direction } from \"./angle.js\";\nimport { flightplan } from \"./flightplan.js\";\nimport { Planet } from \"./planets.js\";\nimport { Star } from \"./stars.js\";\nimport { player_star } from \"./universe.js\";\n\nexport var planet_size = 0;\nexport var cell_size = 0;\nexport var portal_size = 0;\n\n// flag: if portals has are located outside of \"planet area\" (1)\n// or same row/column as top-/bottom-/left-/right-most planets (0)\nexport var portals_ext = 0;\n\n// extra space to reserve for portals\nexport const portal_pad = 0.5;\n\nfunction draw_planet(ctx: CanvasRenderingContext2D, planet: Planet) {\n\tconst x = (planet.x + 1 * portals_ext + portal_pad) * cell_size;\n\tconst y = (planet.y + 1 * portals_ext + portal_pad) * cell_size;\n\tvar grd = ctx.createRadialGradient(x - 1, y - 1, 2, x, y, planet_size);\n\tgrd.addColorStop(0, planet.color_in);\n\tgrd.addColorStop(1, planet.color_out);\n\tctx.fillStyle = grd;\n\tctx.beginPath();\n\tctx.arc(x, y, planet_size, 0, 6);\n\tctx.fill();\n}\n\nfunction draw_portal(ctx: CanvasRenderingContext2D, neighbour: Direction) {\n\tvar x = (neighbour.x + portal_pad) * cell_size;\n\tvar y = (neighbour.y + portal_pad) * cell_size;\n\n\tif (neighbour.target == player_star) draw_player_there(ctx, x, y, neighbour.value);\n\n\tctx.strokeStyle = 'purple';\n\tif (neighbour.target) ctx.strokeStyle = 'violet';\n\tctx.lineWidth = 3;\n\tvar perimeter = Math.PI * portal_size;\n\tvar dashes_count = Math.round(perimeter / 3);\n\tvar dashes_length = perimeter / dashes_count;\n\tctx.setLineDash([dashes_length, dashes_length]);\n\tctx.beginPath();\n\tctx.arc(x, y, portal_size, 0, 7);\n\t// if(neighbour.target==player_star){\n\t// \tctx.fillStyle = 'purple';\n\t// \tctx.fill();\n\t// }\n\tctx.stroke();\n}\n\nfunction draw_player_here(ctx: CanvasRenderingContext2D, x: number, y: number) {\n\tctx.strokeStyle = 'violet';\n\tctx.fillStyle = 'purple';\n\tctx.lineWidth = 3;\n\tctx.setLineDash([1, 0]);\n\tctx.beginPath();\n\tctx.arc(x, y, portal_size, 0, 7);\n\t// ctx.stroke(); \n\tctx.fill();\n}\n\nfunction draw_player_there(ctx: CanvasRenderingContext2D, x: number, y: number, angle: number) {\n\t// x=(x+portal_pad)*cell_size;\n\t// y=(y+portal_pad)*cell_size;\n\tconst r = portal_size * 1.73; // sqrt(3)\n\tconst point_x = function (a: number) { return r * Math.cos((a + angle) / 180 * Math.PI) + x; }\n\tconst point_y = function (a: number) { return -r * Math.sin((a + angle) / 180 * Math.PI) + y; }\n\tconst side = r * 3.46;// 6/sqrt(3)\n\tconst height = r * 3;// side*sqrt(3)/2\n\tctx.strokeStyle = 'purple';\n\tctx.lineWidth = 4;\n\tctx.setLineDash([1, 0]);\n\tctx.beginPath();\n\tconst s = 150;\n\tconst t = 120;\n\tctx.moveTo(point_x(s), point_y(s));\n\tctx.lineTo(point_x(t), point_y(t));\n\tctx.lineTo(point_x(0), point_y(0));\n\tctx.lineTo(point_x(-t), point_y(-t));\n\tctx.lineTo(point_x(-s), point_y(-s));\n\t// ctx.moveTo(point_x(0), point_y(0));\n\t// ctx.lineTo(point_x(t), point_y(t));\n\t// ctx.lineTo(point_x(-t), point_y(-t));\n\t// ctx.lineTo(point_x(0), point_y(0));\n\tctx.stroke();\n}\n\nexport function draw_star(ctx: CanvasRenderingContext2D, star: Star) {\n\tvar max_size = ctx.canvas.width;\n\tcell_size = max_size / (star.size + 2 * portals_ext + 2 * portal_pad);\n\tplanet_size = cell_size / 5;\n\tportal_size = portal_pad * cell_size / 5;\n\tvar center = max_size / 2;\n\tif (star.bright) {\n\t\tvar grd = ctx.createRadialGradient(center, center, 0, center, center, cell_size / 2);\n\t\tgrd.addColorStop(0, \"white\");\n\t\tgrd.addColorStop(0.5, star.color);\n\t\tgrd.addColorStop(1, \"black\");\n\t\tctx.fillStyle = grd;\n\t\tctx.fillRect(0, 0, max_size, max_size);\n\t} else {\n\t\tvar grd = ctx.createRadialGradient(center, center, 10, center, center, cell_size / 2);\n\t\tgrd.addColorStop(0, star.color);\n\t\tgrd.addColorStop(1, \"black\");\n\t\tctx.fillStyle = grd;\n\t\tctx.fillRect(0, 0, max_size, max_size);\n\t}\n\tif (star == player_star) {\n\t\tctx.beginPath();\n\t\tvar x0 = (flightplan.steps[0].x + portal_pad) * cell_size;\n\t\tvar y0 = (flightplan.steps[0].y + portal_pad) * cell_size;\n\t\tctx.moveTo(x0, y0);\n\t\tfor (var i = 1; i < flightplan.steps.length; i++) {\n\t\t\tvar x = (flightplan.steps[i].x + portal_pad) * cell_size;\n\t\t\tvar y = (flightplan.steps[i].y + portal_pad) * cell_size;\n\t\t\tctx.lineTo(x, y);\n\t\t}\n\t\tctx.strokeStyle = 'purple';\n\t\tctx.setLineDash([6, 6]);\n\t\tctx.lineWidth = 3;\n\t\tctx.stroke();\n\n\t\tdraw_player_here(ctx, x0, y0);\n\t} else {\n\t\t// const directionToPlayer=shown_star.neighbours.directionOf(player_star);\n\t\t// draw_player_there(ctx,directionToPlayer.x,directionToPlayer.y,directionToPlayer.value);\n\t}\n\tfor (var planet of star.planets) {\n\t\tdraw_planet(ctx, planet);\n\t}\n\tfor (var neighbour of star.neighbours) {\n\t\tdraw_portal(ctx, neighbour);\n\t}\n}\n", "import pocketbaseEs, { RecordAuthResponse } from \"../js-sdk/dist/pocketbase.es.mjs\";\nimport { Direction } from \"./angle.js\";\nimport { draw_star } from \"./draw.js\";\nimport { flightplan, redrawFlightplan } from \"./flightplan.js\";\nimport { setupHints, set_shown_star, shown_star } from \"./hints.js\";\nimport { Star } from \"./stars.js\";\nimport { check, default_universe, loadUniverse, moveToNewStar, player_star, saveUniverse, set_player_star, stats } from \"./universe.js\";\n\nexport function gebi(id: string) {\n    const element = document.getElementById(id);\n    if (!element) throw ReferenceError(`element ${id} not found`);\n    return element;\n}\n\nexport var mode: string;\n\nvar c = gebi(\"myCanvas\") as HTMLCanvasElement;\nvar ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n\nvar real_savegame_id: string;\nconst flyi_time = 1000 * 60 * 60 * 10; //10h\n//const flyi_time = 1000 * 60 * 10; //10min\nvar flyi_finish: number;\nvar flyi_interval: number;\n\nexport function redraw() {\n    draw_star(ctx, shown_star);\n    setupHints(shown_star, c, gebi('hints'));\n    redrawFlightplan();\n    gebi('mapTitle_player').style.display = (shown_star == player_star) ? '' : 'none';\n    gebi('mapTitle_neighbour').style.display = (shown_star == player_star) ? 'none' : '';\n    if (shown_star != player_star) {\n        gebi('mapTitle_neighbour_n').innerText = '' + player_star.neighbours.indexOf(shown_star) + 1;\n        gebi('mapTitle_neighbour_total').innerText = '' + player_star.neighbours.count;\n    }\n    gebi('stats_s').innerText = '' + stats.s;\n    gebi('stats_p').innerText = '' + stats.p;\n    gebi('stats_js').innerText = '' + stats.js;\n    gebi('stats_jf').innerText = '' + stats.jf;\n    gebi('stats_jf_s').innerText = '' + Math.round(stats.jf / stats.s * 100) / 100;\n    gebi('stats_jf_p').innerText = '' + Math.round(stats.jf / stats.p * 100);\n    gebi('stats_jf_js').innerText = '' + Math.round(stats.jf / stats.js * 100);\n    // gebi('stats_mr').innerText=stats.mr;\n    // gebi('stats_mrc').innerText=stats.mrc;\n    // gebi('stats_mrc_show').style.display=stats.mrc>1?'':'none';\n}\n\nwindow.onhashchange = async function () {\n    mode = location.hash.slice(1);\n    if (['test', 'easy', 'hard', 'real'].indexOf(mode) == -1) {\n        history.replaceState(0, '', location.pathname);\n        (gebi('select_mode') as HTMLDialogElement).showModal();\n        return;\n    }\n\n    if (mode == 'test') return start_game(JSON.parse(default_universe));\n    if (['easy', 'hard'].indexOf(mode) > -1) return start_game(JSON.parse(localStorage['space2d2' + mode] || default_universe));\n\n    // REAL mode\n\n    const m = await import('../js-sdk/dist/pocketbase.es.mjs');\n    const PocketBase = m.default;\n    const pb = new PocketBase('http://127.0.0.1:8090');\n\n    save_game = async function () {\n        console.log('real mode save_game');\n        // TODO: error checking\n        if (real_savegame_id) {\n            pb.collection('real').update(real_savegame_id, {\n                data: saveUniverse(),\n            });\n        } else {\n            var r = await pb.collection('real').create({\n                user: pb.authStore.model.id,\n                data: saveUniverse(),\n            });\n            real_savegame_id = r.id;\n        }\n    };\n\n    pb.collection('users').authRefresh({}, { expand: 'real(user)' }).then(\n        start_real_game,\n        () => setup_login_flow(pb));\n}\n\nfunction setup_login_flow(pb: pocketbaseEs) {\n    window.login = function () {\n        pb.collection('users').authWithPassword(\n            gebi('login_email').value,\n            gebi('login_password').value,\n            {}, { expand: 'real(user)' }\n        ).then((r) => {\n            (gebi('login') as HTMLDialogElement).close();\n            start_real_game(r);\n        }, (e) => {\n            console.log(e);\n            gebi('login_failure').style.display = '';\n            gebi('login_details').innerText = JSON.stringify(e.response, null, 2);\n        });\n    };\n    window.register = function () {\n        pb.collection('users').create({\n            username: gebi('register_username').value,\n            email: gebi('register_email').value,\n            password: gebi('register_password').value,\n            passwordConfirm: gebi('register_password').value,\n        }).then(async (r) => {\n            if (gebi('register_username').value) {\n                gebi('login_email').value = gebi('register_username').value;\n            }\n            if (gebi('register_email').value) {\n                gebi('login_email').value = gebi('register_email').value;\n            }\n            gebi('login_password').value = gebi('register_password').value;\n            (gebi('register') as HTMLDialogElement).close();\n            (gebi('register_to_login') as HTMLDialogElement).showModal();\n        }, (e) => {\n            console.log(e);\n            gebi('register_failure').style.display = '';\n            gebi('register_details').innerText = JSON.stringify(e.response, null, 2);\n        });\n    };\n    (gebi('login') as HTMLDialogElement).showModal();\n}\n\nfunction start_real_game(r: RecordAuthResponse) {\n    const ex = r.record.expand['real(user)'];\n    if (!ex || !ex.data) {\n        return start_game(JSON.parse(default_universe));\n    }\n    real_savegame_id = ex.id;\n    flyi_finish = new Date(ex.updated).getTime() + flyi_time;\n    if (flyi_finish <= new Date().getTime()) {\n        return start_game(ex.data);\n    }\n    mode = 'flyi';\n    start_game(ex.data);\n    flyi_switch(true);\n    flyi_step();\n    flyi_interval = setInterval(flyi_step, 1000);\n}\n\nfunction flyi_step() {\n    const flyi_remain = flyi_finish - new Date().getTime();\n    gebi('flyi_time').innerText = '' + new Date(flyi_remain).toISOString().substring(11, 19);\n    if (flyi_remain >= 1000) return;\n    // switch off\n    mode = 'real';\n    clearInterval(flyi_interval);\n    flyi_switch(false);\n}\n\nfunction flyi_switch(on: boolean) {\n    gebi('mapTitle_flying').style.display = on ? '' : 'none';\n    gebi('mapTitle_player').style.display = on ? 'none' : '';\n    gebi('fpTitle_normal').style.display = on ? 'none' : '';\n    gebi('fpTitle_flyi').style.display = on ? '' : 'none';\n    gebi('myFlightplan').style.display = on ? 'none' : '';\n    gebi('fp_hint').style.display = on ? 'none' : '';\n    gebi('fp_flyi').style.display = on ? '' : 'none';\n}\n\nfunction start_game(universe) {\n    gebi('main').style.display = 'flex';\n    loadUniverse(universe);\n    if (!check())\n        alert('universe error, check console');\n    set_shown_star(player_star);\n    redraw();\n}\n\nvar save_game = function () {\n    console.log('simple mode save_game');\n    localStorage['space2d2' + mode] = JSON.stringify(saveUniverse());\n};\n\nexport function jump() {\n    if (shown_star == player_star) return;\n    if (shown_star.visited) return;\n    stats.s++;\n    stats.p += flightplan.steps.length - 1;\n    stats.jf += flightplan.countJobs();\n    stats.js += player_star.jobs;\n    console.clear();\n    moveToNewStar(shown_star, player_star);\n    var lastCargo = flightplan.lastStep.cargo;\n    var direction = shown_star.neighbours.directionOf(player_star);\n    flightplan.init(direction.x, direction.y, lastCargo, gebi('myFlightplan') as HTMLDivElement);\n    player_star.visited = true;\n    set_player_star(shown_star);\n    save_game();\n    redraw();\n    if (!check()) alert('universe error, check console');\n    if (mode != 'real') return;\n    // for REAL mode\n    mode = 'flyi';\n    flyi_finish = new Date().getTime() + flyi_time;\n    flyi_switch(true);\n    flyi_step();\n    flyi_interval = setInterval(flyi_step, 1000);\n}\n\nwindow.onhashchange();\n\nwindow.jump = jump;\nwindow.redraw = redraw;\nwindow.flightplan = flightplan;\nwindow.redrawFlightplan = redrawFlightplan;\nwindow.set_shown_star = set_shown_star;\nwindow.get_shown_star = () => shown_star;\nwindow.player_star = player_star;\nwindow.get_player_star = () => player_star;\nwindow.save_game = save_game;\n\n\nif (location.hostname == 'localhost') {\n    new EventSource('/esbuild').addEventListener('change', () => location.reload());\n}"],
  "mappings": "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",
  "names": ["c", "x", "c", "ctx"]
}
